{"version":3,"file":"server-C8IwLs5S.js","names":[],"sources":["../../mcp-discovery/dist/index.js","../src/server.ts"],"sourcesContent":["import \"minimatch\";\n\n//#region src/configuration-loader.ts\n/**\n* Configuration loader for discovery engine\n*/\nvar ConfigurationLoader = class {\n\t/**\n\t* Get default configuration\n\t*/\n\tgetDefaultConfig() {\n\t\treturn {\n\t\t\tenabled: true,\n\t\t\tcache: {\n\t\t\t\tenabled: true,\n\t\t\t\tttl: 3600\n\t\t\t},\n\t\t\tsources: [],\n\t\t\ttoolRules: []\n\t\t};\n\t}\n\t/**\n\t* Validate discovery configuration\n\t*/\n\tvalidate(config) {\n\t\tconst errors = [];\n\t\tif (typeof config.enabled !== \"boolean\") errors.push(\"enabled must be a boolean\");\n\t\tif (config.cache !== void 0) if (typeof config.cache !== \"object\" || config.cache === null) errors.push(\"cache must be an object\");\n\t\telse {\n\t\t\tif (typeof config.cache.enabled !== \"boolean\") errors.push(\"cache.enabled must be a boolean\");\n\t\t\tif (typeof config.cache.ttl !== \"number\" || config.cache.ttl <= 0) errors.push(\"cache.ttl must be a positive number\");\n\t\t}\n\t\tif (config.sources !== void 0) if (!Array.isArray(config.sources)) errors.push(\"sources must be an array\");\n\t\telse config.sources.forEach((source, index) => {\n\t\t\tif (typeof source.type !== \"string\") errors.push(`sources[${index}].type must be a string`);\n\t\t\tif (typeof source.path !== \"string\") errors.push(`sources[${index}].path must be a string`);\n\t\t});\n\t\tif (config.toolRules !== void 0) if (!Array.isArray(config.toolRules)) errors.push(\"toolRules must be an array\");\n\t\telse config.toolRules.forEach((rule, index) => {\n\t\t\tif (!Array.isArray(rule.pattern)) errors.push(`toolRules[${index}].pattern must be an array`);\n\t\t\tif (rule.server !== void 0 && typeof rule.server !== \"string\") errors.push(`toolRules[${index}].server must be a string`);\n\t\t\tif (rule.enabled !== void 0 && typeof rule.enabled !== \"boolean\") errors.push(`toolRules[${index}].enabled must be a boolean`);\n\t\t\tif (rule.tags !== void 0 && !Array.isArray(rule.tags)) errors.push(`toolRules[${index}].tags must be an array`);\n\t\t});\n\t\treturn {\n\t\t\tvalid: errors.length === 0,\n\t\t\terrors\n\t\t};\n\t}\n\t/**\n\t* Merge partial configuration with defaults\n\t*/\n\tmergeWithDefaults(partial) {\n\t\tconst defaults = this.getDefaultConfig();\n\t\treturn {\n\t\t\tenabled: partial.enabled ?? defaults.enabled,\n\t\t\tcache: partial.cache ?? defaults.cache,\n\t\t\tsources: partial.sources ?? defaults.sources,\n\t\t\ttoolRules: partial.toolRules ?? defaults.toolRules\n\t\t};\n\t}\n};\n\n//#endregion\n//#region ../config/dist/index.js\nvar ConnectorRegistry = class {\n\tfactories = /* @__PURE__ */ new Map();\n\tregisterConnector(factory) {\n\t\tconst connectorType = factory.getProviderId();\n\t\tif (!this.factories.has(connectorType)) this.factories.set(connectorType, factory);\n\t}\n\tcreateConnector(providerId, config$1 = {}) {\n\t\tconst factory = this.factories.get(providerId);\n\t\tif (!factory) throw new Error(`No connector registered for provider: ${providerId}`);\n\t\treturn factory.create(config$1);\n\t}\n\tgetConnector(providerId, config$1 = {}) {\n\t\treturn this.createConnector(providerId, config$1);\n\t}\n\thasConnector(providerId) {\n\t\treturn this.factories.has(providerId);\n\t}\n\tgetAvailableProviders() {\n\t\treturn Array.from(this.factories.keys());\n\t}\n\tunregisterConnector(providerId) {\n\t\treturn this.factories.delete(providerId);\n\t}\n\tclear() {\n\t\tthis.factories.clear();\n\t}\n\tasync getAllModels() {\n\t\tconst results = [];\n\t\tfor (const [providerId, factory] of this.factories) try {\n\t\t\tconst models = await factory.create({}).listModels();\n\t\t\tresults.push({\n\t\t\t\tprovider: providerId,\n\t\t\t\tmodels\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.warn(`Failed to get models from ${providerId}:`, error);\n\t\t}\n\t\treturn results;\n\t}\n};\nnew ConnectorRegistry();\n/**\n* Simple glob pattern matcher for model filtering\n* Supports: *, ?, [abc], {a,b,c}, ! for negation, and regex patterns\n* \n* Regex patterns should be wrapped in /.../ or /.../<flags>\n* Examples:\n*   - /gpt-[45]/ - matches gpt-4 or gpt-5\n*   - /^claude.*sonnet$/i - case-insensitive match\n*/\n/**\n* Check if a pattern is a regex pattern (wrapped in /.../)\n*/\nfunction isRegexPattern(pattern) {\n\treturn pattern.startsWith(\"/\") && pattern.lastIndexOf(\"/\") > 0;\n}\n/**\n* Parse a regex pattern string into a RegExp object\n*/\nfunction parseRegexPattern(pattern) {\n\tconst lastSlash = pattern.lastIndexOf(\"/\");\n\tconst regexBody = pattern.substring(1, lastSlash);\n\tconst flags = pattern.substring(lastSlash + 1);\n\treturn new RegExp(regexBody, flags || \"i\");\n}\n/**\n* Convert a glob pattern to a regular expression\n*/\nfunction globToRegex(pattern) {\n\tconst regex = pattern.replace(/[.+^${}()|[\\]\\\\]/g, \"\\\\$&\").replace(/\\{([^}]+)\\}/g, (_, group) => `(${group.replace(/,/g, \"|\")})`).replace(/\\\\\\[([^\\]]+)\\\\\\]/g, \"[$1]\").replace(/\\*/g, \".*\").replace(/\\?/g, \".\");\n\treturn new RegExp(`^${regex}$`, \"i\");\n}\n/**\n* Check if a model ID matches any of the glob/regex patterns\n* Supports negation patterns starting with !, regex patterns wrapped in /.../, and RegExp objects\n* \n* @param modelId - The model ID to test\n* @param patterns - Array of glob strings, regex strings, or RegExp objects (can include negation patterns with !)\n* @returns true if the model matches (considering both positive and negative patterns)\n*/\nfunction matchesGlobPatterns(modelId, patterns) {\n\tif (!patterns || patterns.length === 0) return true;\n\tconst positivePatterns = [];\n\tconst negativePatterns = [];\n\tfor (const pattern of patterns) {\n\t\tif (pattern instanceof RegExp) {\n\t\t\tpositivePatterns.push(pattern);\n\t\t\tcontinue;\n\t\t}\n\t\tif (pattern.startsWith(\"!\")) {\n\t\t\tconst actualPattern = pattern.substring(1);\n\t\t\tif (isRegexPattern(actualPattern)) negativePatterns.push(parseRegexPattern(actualPattern));\n\t\t\telse negativePatterns.push(globToRegex(actualPattern));\n\t\t} else if (isRegexPattern(pattern)) positivePatterns.push(parseRegexPattern(pattern));\n\t\telse positivePatterns.push(globToRegex(pattern));\n\t}\n\tfor (const negPattern of negativePatterns) if (negPattern.test(modelId)) return false;\n\tif (positivePatterns.length === 0) return true;\n\tfor (const posPattern of positivePatterns) if (posPattern.test(modelId)) return true;\n\treturn false;\n}\n\n//#endregion\n//#region src/pattern-matcher.ts\n/**\n* Pattern matcher for tool filtering\n* Reuses glob-matcher from @anygpt/config\n*/\nvar PatternMatcher = class {\n\t/**\n\t* Check if a tool name matches any of the patterns\n\t* \n\t* @param toolName - Tool name to match\n\t* @param patterns - Array of glob or regex patterns\n\t* @returns true if tool matches any pattern\n\t*/\n\tmatchTool(toolName, patterns) {\n\t\treturn matchesGlobPatterns(toolName, patterns);\n\t}\n\t/**\n\t* Check if a tool matches a specific rule\n\t* \n\t* @param toolName - Tool name to match\n\t* @param serverName - Server name\n\t* @param rule - Tool rule to check\n\t* @returns true if tool matches the rule\n\t*/\n\tmatchRule(toolName, serverName, rule) {\n\t\tif (rule.server && rule.server !== serverName) return false;\n\t\treturn this.matchTool(toolName, rule.pattern);\n\t}\n\t/**\n\t* Find all rules that match a tool\n\t* \n\t* @param toolName - Tool name to match\n\t* @param serverName - Server name\n\t* @param rules - Array of tool rules\n\t* @returns Array of matching rules\n\t*/\n\tfindMatchingRules(toolName, serverName, rules) {\n\t\treturn rules.filter((rule) => this.matchRule(toolName, serverName, rule));\n\t}\n};\n\n//#endregion\n//#region src/search-engine.ts\n/**\n* Search engine for tool discovery with relevance scoring\n*/\nvar SearchEngine = class {\n\ttools = [];\n\t/**\n\t* Index tools for search\n\t* \n\t* @param tools - Array of tool metadata to index\n\t*/\n\tindex(tools) {\n\t\tthis.tools = tools;\n\t}\n\t/**\n\t* Search for tools with relevance scoring\n\t* \n\t* @param query - Search query\n\t* @param options - Search options\n\t* @returns Array of search results sorted by relevance\n\t*/\n\tsearch(query, options) {\n\t\tconst queryLower = query.toLowerCase();\n\t\tconst queryTokens = queryLower.split(/\\s+/).filter((t) => t.length > 0);\n\t\tlet filteredTools = this.tools;\n\t\tif (options?.server) filteredTools = filteredTools.filter((t) => t.server === options.server);\n\t\tif (!options?.includeDisabled) filteredTools = filteredTools.filter((t) => t.enabled);\n\t\tconst results = [];\n\t\tfor (const tool of filteredTools) {\n\t\t\tconst relevance = this.calculateRelevance(tool, queryLower, queryTokens);\n\t\t\tif (relevance > 0) results.push({\n\t\t\t\tserver: tool.server,\n\t\t\t\ttool: tool.name,\n\t\t\t\tsummary: tool.summary,\n\t\t\t\trelevance,\n\t\t\t\ttags: tool.tags\n\t\t\t});\n\t\t}\n\t\tresults.sort((a, b) => b.relevance - a.relevance);\n\t\tif (options?.limit && options.limit > 0) return results.slice(0, options.limit);\n\t\treturn results;\n\t}\n\t/**\n\t* Calculate relevance score for a tool\n\t* \n\t* @param tool - Tool metadata\n\t* @param query - Lowercase query string\n\t* @param queryTokens - Query split into tokens\n\t* @returns Relevance score (0-1)\n\t*/\n\tcalculateRelevance(tool, query, queryTokens) {\n\t\tconst toolNameLower = tool.name.toLowerCase();\n\t\tconst summaryLower = tool.summary.toLowerCase();\n\t\tconst tagsLower = tool.tags.map((t) => t.toLowerCase());\n\t\tlet score = 0;\n\t\tif (toolNameLower === query) score += 1;\n\t\telse if (toolNameLower.includes(query)) score += .8;\n\t\tif (summaryLower.includes(query)) score += .6;\n\t\tfor (const token of queryTokens) {\n\t\t\tif (toolNameLower.includes(token)) score += .4;\n\t\t\tif (summaryLower.includes(token)) score += .2;\n\t\t}\n\t\tfor (const tag of tagsLower) {\n\t\t\tif (query.includes(tag) || tag.includes(query)) score += .3;\n\t\t\tfor (const token of queryTokens) if (tag.includes(token)) score += .15;\n\t\t}\n\t\treturn Math.min(score, 1);\n\t}\n};\n\n//#endregion\n//#region src/tool-metadata-manager.ts\n/**\n* Tool metadata manager for storing and filtering tools\n*/\nvar ToolMetadataManager = class {\n\ttools = /* @__PURE__ */ new Map();\n\tpatternMatcher = new PatternMatcher();\n\t/**\n\t* Add or update a tool\n\t* \n\t* @param tool - Tool metadata to add\n\t*/\n\taddTool(tool) {\n\t\tconst key = this.getToolKey(tool.server, tool.name);\n\t\tthis.tools.set(key, tool);\n\t}\n\t/**\n\t* Get a specific tool\n\t* \n\t* @param server - Server name\n\t* @param tool - Tool name\n\t* @returns Tool metadata or null if not found\n\t*/\n\tgetTool(server, tool) {\n\t\tconst key = this.getToolKey(server, tool);\n\t\treturn this.tools.get(key) || null;\n\t}\n\t/**\n\t* Get all tools from a specific server\n\t* \n\t* @param server - Server name\n\t* @param includeDisabled - Include disabled tools\n\t* @returns Array of tool metadata\n\t*/\n\tgetToolsByServer(server, includeDisabled = false) {\n\t\tconst tools = [];\n\t\tfor (const tool of this.tools.values()) if (tool.server === server) {\n\t\t\tif (includeDisabled || tool.enabled) tools.push(tool);\n\t\t}\n\t\treturn tools;\n\t}\n\t/**\n\t* Get all tools from all servers\n\t* \n\t* @param includeDisabled - Include disabled tools\n\t* @returns Array of tool metadata\n\t*/\n\tgetAllTools(includeDisabled = false) {\n\t\tconst tools = [];\n\t\tfor (const tool of this.tools.values()) if (includeDisabled || tool.enabled) tools.push(tool);\n\t\treturn tools;\n\t}\n\t/**\n\t* Apply filtering rules to all tools\n\t* \n\t* @param rules - Array of tool rules\n\t*/\n\tapplyRules(rules) {\n\t\tconst hasWhitelist = rules.some((r) => r.enabled === true);\n\t\tfor (const tool of this.tools.values()) {\n\t\t\tlet enabled = !hasWhitelist;\n\t\t\tconst tags = [...tool.tags];\n\t\t\tfor (const rule of rules) {\n\t\t\t\tif (!this.patternMatcher.matchRule(tool.name, tool.server, rule)) continue;\n\t\t\t\tif (rule.enabled !== void 0) enabled = rule.enabled;\n\t\t\t\tif (rule.tags) tags.push(...rule.tags);\n\t\t\t}\n\t\t\ttool.enabled = enabled;\n\t\t\ttool.tags = [...new Set(tags)];\n\t\t}\n\t}\n\t/**\n\t* Get total tool count for a server\n\t* \n\t* @param server - Server name\n\t* @returns Total tool count\n\t*/\n\tgetToolCount(server) {\n\t\tlet count = 0;\n\t\tfor (const tool of this.tools.values()) if (tool.server === server) count++;\n\t\treturn count;\n\t}\n\t/**\n\t* Get enabled tool count for a server\n\t* \n\t* @param server - Server name\n\t* @returns Enabled tool count\n\t*/\n\tgetEnabledCount(server) {\n\t\tlet count = 0;\n\t\tfor (const tool of this.tools.values()) if (tool.server === server && tool.enabled) count++;\n\t\treturn count;\n\t}\n\t/**\n\t* Generate a unique key for a tool\n\t* \n\t* @param server - Server name\n\t* @param tool - Tool name\n\t* @returns Unique key\n\t*/\n\tgetToolKey(server, tool) {\n\t\treturn `${server}:${tool}`;\n\t}\n};\n\n//#endregion\n//#region src/caching-layer.ts\n/**\n* Caching layer for discovery engine\n* Supports TTL-based caching for servers and tool summaries\n* Indefinite caching for tool details\n*/\nvar CachingLayer = class {\n\tcache = /* @__PURE__ */ new Map();\n\t/**\n\t* Cache server list with TTL\n\t* \n\t* @param servers - Array of server metadata\n\t* @param ttl - Time-to-live in seconds\n\t*/\n\tcacheServerList(servers, ttl) {\n\t\tthis.cache.set(\"servers\", {\n\t\t\tdata: servers,\n\t\t\texpiresAt: Date.now() + ttl * 1e3\n\t\t});\n\t}\n\t/**\n\t* Get cached server list\n\t* \n\t* @returns Cached server list or null if not cached/expired\n\t*/\n\tgetServerList() {\n\t\treturn this.get(\"servers\");\n\t}\n\t/**\n\t* Cache tool summaries for a specific server with TTL\n\t* \n\t* @param server - Server name\n\t* @param tools - Array of tool metadata\n\t* @param ttl - Time-to-live in seconds\n\t*/\n\tcacheToolSummaries(server, tools, ttl) {\n\t\tconst key = `tools:${server}`;\n\t\tthis.cache.set(key, {\n\t\t\tdata: tools,\n\t\t\texpiresAt: Date.now() + ttl * 1e3\n\t\t});\n\t}\n\t/**\n\t* Get cached tool summaries for a specific server\n\t* \n\t* @param server - Server name\n\t* @returns Cached tool summaries or null if not cached/expired\n\t*/\n\tgetToolSummaries(server) {\n\t\tconst key = `tools:${server}`;\n\t\treturn this.get(key);\n\t}\n\t/**\n\t* Cache tool details indefinitely\n\t* \n\t* @param server - Server name\n\t* @param tool - Tool name\n\t* @param details - Tool metadata with full details\n\t*/\n\tcacheToolDetails(server, tool, details) {\n\t\tconst key = `tool:${server}:${tool}`;\n\t\tthis.cache.set(key, {\n\t\t\tdata: details,\n\t\t\texpiresAt: null\n\t\t});\n\t}\n\t/**\n\t* Get cached tool details\n\t* \n\t* @param server - Server name\n\t* @param tool - Tool name\n\t* @returns Cached tool details or null if not cached\n\t*/\n\tgetToolDetails(server, tool) {\n\t\tconst key = `tool:${server}:${tool}`;\n\t\treturn this.get(key);\n\t}\n\t/**\n\t* Invalidate a specific cache key\n\t* \n\t* @param key - Cache key to invalidate (e.g., 'servers', 'tools:github')\n\t*/\n\tinvalidate(key) {\n\t\tthis.cache.delete(key);\n\t}\n\t/**\n\t* Invalidate all caches\n\t*/\n\tinvalidateAll() {\n\t\tthis.cache.clear();\n\t}\n\t/**\n\t* Get cached value if not expired\n\t* \n\t* @param key - Cache key\n\t* @returns Cached value or null if not cached/expired\n\t*/\n\tget(key) {\n\t\tconst entry = this.cache.get(key);\n\t\tif (!entry) return null;\n\t\tif (entry.expiresAt !== null && Date.now() > entry.expiresAt) {\n\t\t\tthis.cache.delete(key);\n\t\t\treturn null;\n\t\t}\n\t\treturn entry.data;\n\t}\n};\n\n//#endregion\n//#region src/tool-execution-proxy.ts\n/**\n* Tool execution proxy for connecting to MCP servers\n* \n* Note: This is the initial implementation that provides the interface.\n* Full MCP SDK integration will be added in the next iteration.\n*/\nvar ToolExecutionProxy = class {\n\tconnections = /* @__PURE__ */ new Map();\n\t/**\n\t* Execute a tool on a remote MCP server\n\t* \n\t* @param server - Server name\n\t* @param tool - Tool name\n\t* @param args - Tool arguments\n\t* @returns Execution result\n\t*/\n\tasync execute(server, tool, args) {\n\t\tif (args === null || args === void 0) return {\n\t\t\tsuccess: false,\n\t\t\terror: {\n\t\t\t\tcode: \"INVALID_ARGUMENTS\",\n\t\t\t\tmessage: \"Tool arguments cannot be null or undefined\",\n\t\t\t\tserver,\n\t\t\t\ttool\n\t\t\t}\n\t\t};\n\t\tif (!this.isConnected(server)) return {\n\t\t\tsuccess: false,\n\t\t\terror: {\n\t\t\t\tcode: \"SERVER_NOT_CONNECTED\",\n\t\t\t\tmessage: `Server ${server} is not connected`,\n\t\t\t\tserver,\n\t\t\t\ttool\n\t\t\t}\n\t\t};\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\terror: {\n\t\t\t\tcode: \"NOT_IMPLEMENTED\",\n\t\t\t\tmessage: \"Tool execution proxy is not yet fully implemented\",\n\t\t\t\tserver,\n\t\t\t\ttool\n\t\t\t}\n\t\t};\n\t}\n\t/**\n\t* Connect to an MCP server\n\t* \n\t* @param server - Server name\n\t* @param config - Server configuration\n\t*/\n\tasync connect(server, config) {\n\t\tthis.connections.set(server, true);\n\t}\n\t/**\n\t* Disconnect from an MCP server\n\t* \n\t* @param server - Server name\n\t*/\n\tasync disconnect(server) {\n\t\tthis.connections.delete(server);\n\t}\n\t/**\n\t* Check if connected to a server\n\t* \n\t* @param server - Server name\n\t* @returns true if connected\n\t*/\n\tisConnected(server) {\n\t\treturn this.connections.get(server) === true;\n\t}\n};\n\n//#endregion\n//#region src/discovery-engine.ts\n/**\n* Main discovery engine facade that coordinates all components\n*/\nvar DiscoveryEngine = class {\n\tconfig;\n\tconfigLoader;\n\tpatternMatcher;\n\tsearchEngine;\n\tmetadataManager;\n\tcache;\n\texecutionProxy;\n\tconstructor(config) {\n\t\tthis.config = config;\n\t\tthis.configLoader = new ConfigurationLoader();\n\t\tthis.patternMatcher = new PatternMatcher();\n\t\tthis.searchEngine = new SearchEngine();\n\t\tthis.metadataManager = new ToolMetadataManager();\n\t\tthis.cache = new CachingLayer();\n\t\tthis.executionProxy = new ToolExecutionProxy();\n\t\tthis.applyConfiguration();\n\t}\n\t/**\n\t* List all available MCP servers\n\t* \n\t* @returns Array of server metadata\n\t*/\n\tasync listServers() {\n\t\tif (this.config.cache?.enabled) {\n\t\t\tconst cached = this.cache.getServerList();\n\t\t\tif (cached) return cached;\n\t\t}\n\t\tconst servers = [];\n\t\tif (this.config.cache?.enabled && this.config.cache.ttl) this.cache.cacheServerList(servers, this.config.cache.ttl);\n\t\treturn servers;\n\t}\n\t/**\n\t* Search for tools across all servers\n\t* \n\t* @param query - Search query\n\t* @param options - Search options\n\t* @returns Array of search results\n\t*/\n\tasync searchTools(query, options) {\n\t\tconst tools = this.metadataManager.getAllTools(options?.includeDisabled);\n\t\tthis.searchEngine.index(tools);\n\t\treturn this.searchEngine.search(query, options);\n\t}\n\t/**\n\t* List tools from a specific server\n\t* \n\t* @param server - Server name\n\t* @param includeDisabled - Include disabled tools\n\t* @returns Array of tool metadata\n\t*/\n\tasync listTools(server, includeDisabled = false) {\n\t\tif (this.config.cache?.enabled && !includeDisabled) {\n\t\t\tconst cached = this.cache.getToolSummaries(server);\n\t\t\tif (cached) return cached;\n\t\t}\n\t\tconst tools = this.metadataManager.getToolsByServer(server, includeDisabled);\n\t\tif (this.config.cache?.enabled && this.config.cache.ttl && !includeDisabled) this.cache.cacheToolSummaries(server, tools, this.config.cache.ttl);\n\t\treturn tools;\n\t}\n\t/**\n\t* Get detailed information about a specific tool\n\t* \n\t* @param server - Server name\n\t* @param tool - Tool name\n\t* @returns Tool metadata or null if not found\n\t*/\n\tasync getToolDetails(server, tool) {\n\t\tif (this.config.cache?.enabled) {\n\t\t\tconst cached = this.cache.getToolDetails(server, tool);\n\t\t\tif (cached) return cached;\n\t\t}\n\t\tconst toolMetadata = this.metadataManager.getTool(server, tool);\n\t\tif (this.config.cache?.enabled && toolMetadata) this.cache.cacheToolDetails(server, tool, toolMetadata);\n\t\treturn toolMetadata;\n\t}\n\t/**\n\t* Execute a tool from any discovered MCP server\n\t* \n\t* @param server - Server name\n\t* @param tool - Tool name\n\t* @param args - Tool arguments\n\t* @returns Execution result\n\t*/\n\tasync executeTool(server, tool, args) {\n\t\tconst toolMetadata = this.metadataManager.getTool(server, tool);\n\t\tif (!toolMetadata) return {\n\t\t\tsuccess: false,\n\t\t\terror: {\n\t\t\t\tcode: \"TOOL_NOT_FOUND\",\n\t\t\t\tmessage: `Tool ${tool} not found on server ${server}`,\n\t\t\t\tserver,\n\t\t\t\ttool\n\t\t\t}\n\t\t};\n\t\tif (!toolMetadata.enabled) return {\n\t\t\tsuccess: false,\n\t\t\terror: {\n\t\t\t\tcode: \"TOOL_DISABLED\",\n\t\t\t\tmessage: `Tool ${tool} is disabled`,\n\t\t\t\tserver,\n\t\t\t\ttool\n\t\t\t}\n\t\t};\n\t\treturn this.executionProxy.execute(server, tool, args);\n\t}\n\t/**\n\t* Reload configuration\n\t*/\n\tasync reload() {\n\t\tthis.cache.invalidateAll();\n\t\tthis.applyConfiguration();\n\t}\n\t/**\n\t* Get current configuration\n\t* \n\t* @returns Current discovery configuration\n\t*/\n\tgetConfig() {\n\t\treturn this.config;\n\t}\n\t/**\n\t* Apply configuration to components\n\t*/\n\tapplyConfiguration() {\n\t\tif (this.config.toolRules && this.config.toolRules.length > 0) this.metadataManager.applyRules(this.config.toolRules);\n\t}\n};\n\n//#endregion\nexport { CachingLayer, ConfigurationLoader, DiscoveryEngine, PatternMatcher, SearchEngine, ToolExecutionProxy, ToolMetadataManager };\n//# sourceMappingURL=index.js.map","import { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n  type CallToolRequest,\n  type Tool\n} from '@modelcontextprotocol/sdk/types.js';\nimport { DiscoveryEngine, type DiscoveryConfig } from '@anygpt/mcp-discovery';\n\n/**\n * MCP Discovery Server - PRIMARY interface for AI agents\n * Exposes 5 meta-tools for tool discovery and execution\n */\nexport class DiscoveryMCPServer {\n  private server: Server;\n  private engine: DiscoveryEngine;\n  private tools: Tool[];\n\n  constructor(config: DiscoveryConfig) {\n    this.engine = new DiscoveryEngine(config);\n    this.server = new Server(\n      {\n        name: 'mcp-discovery-server',\n        version: '0.1.0',\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.tools = this.defineTools();\n    this.setupHandlers();\n  }\n\n  /**\n   * Define the 5 meta-tools\n   */\n  private defineTools(): Tool[] {\n    return [\n      {\n        name: 'list_mcp_servers',\n        description: 'List all available MCP servers that can be discovered',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      },\n      {\n        name: 'search_tools',\n        description: 'Search for tools across all MCP servers using free-text query',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            query: {\n              type: 'string',\n              description: 'Search query (e.g., \"github issue\", \"read file\")'\n            },\n            server: {\n              type: 'string',\n              description: 'Optional: Filter by server name'\n            },\n            limit: {\n              type: 'number',\n              description: 'Optional: Maximum number of results (default: 10)'\n            }\n          },\n          required: ['query']\n        }\n      },\n      {\n        name: 'list_tools',\n        description: 'List all tools from a specific MCP server',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            server: {\n              type: 'string',\n              description: 'Server name (e.g., \"github\", \"filesystem\")'\n            },\n            includeDisabled: {\n              type: 'boolean',\n              description: 'Include disabled tools (default: false)'\n            }\n          },\n          required: ['server']\n        }\n      },\n      {\n        name: 'get_tool_details',\n        description: 'Get detailed information about a specific tool',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            server: {\n              type: 'string',\n              description: 'Server name'\n            },\n            tool: {\n              type: 'string',\n              description: 'Tool name'\n            }\n          },\n          required: ['server', 'tool']\n        }\n      },\n      {\n        name: 'execute_tool',\n        description: 'Execute a tool from any MCP server (gateway capability)',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            server: {\n              type: 'string',\n              description: 'Server name'\n            },\n            tool: {\n              type: 'string',\n              description: 'Tool name'\n            },\n            arguments: {\n              type: 'object',\n              description: 'Tool arguments'\n            }\n          },\n          required: ['server', 'tool', 'arguments']\n        }\n      }\n    ];\n  }\n\n  /**\n   * Setup MCP protocol handlers\n   */\n  private setupHandlers(): void {\n    // List tools handler\n    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({\n      tools: this.tools\n    }));\n\n    // Call tool handler\n    this.server.setRequestHandler(CallToolRequestSchema, async (request: CallToolRequest) => {\n      const { name, arguments: args } = request.params;\n      \n      try {\n        const result = await this.handleToolCall(name, args || {});\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(result, null, 2)\n            }\n          ]\n        };\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify({\n                error: errorMessage\n              }, null, 2)\n            }\n          ],\n          isError: true\n        };\n      }\n    });\n  }\n\n  /**\n   * Handle tool call\n   */\n  async handleToolCall(name: string, args: any): Promise<any> {\n    switch (name) {\n      case 'list_mcp_servers':\n        return this.handleListServers();\n      \n      case 'search_tools':\n        return this.handleSearchTools(args);\n      \n      case 'list_tools':\n        return this.handleListTools(args);\n      \n      case 'get_tool_details':\n        return this.handleGetToolDetails(args);\n      \n      case 'execute_tool':\n        return this.handleExecuteTool(args);\n      \n      default:\n        throw new Error(`Unknown tool: ${name}`);\n    }\n  }\n\n  /**\n   * Handle list_mcp_servers\n   */\n  private async handleListServers(): Promise<any> {\n    const servers = await this.engine.listServers();\n    return { servers };\n  }\n\n  /**\n   * Handle search_tools\n   */\n  private async handleSearchTools(args: any): Promise<any> {\n    if (!args.query) {\n      throw new Error('Missing required parameter: query');\n    }\n\n    const results = await this.engine.searchTools(args.query, {\n      server: args.server,\n      limit: args.limit || 10\n    });\n\n    return { results };\n  }\n\n  /**\n   * Handle list_tools\n   */\n  private async handleListTools(args: any): Promise<any> {\n    if (!args.server) {\n      throw new Error('Missing required parameter: server');\n    }\n\n    const tools = await this.engine.listTools(\n      args.server,\n      args.includeDisabled || false\n    );\n\n    return { tools };\n  }\n\n  /**\n   * Handle get_tool_details\n   */\n  private async handleGetToolDetails(args: any): Promise<any> {\n    if (!args.server) {\n      throw new Error('Missing required parameter: server');\n    }\n    if (!args.tool) {\n      throw new Error('Missing required parameter: tool');\n    }\n\n    const tool = await this.engine.getToolDetails(args.server, args.tool);\n    return { tool };\n  }\n\n  /**\n   * Handle execute_tool\n   */\n  private async handleExecuteTool(args: any): Promise<any> {\n    if (!args.server) {\n      throw new Error('Missing required parameter: server');\n    }\n    if (!args.tool) {\n      throw new Error('Missing required parameter: tool');\n    }\n    if (args.arguments === undefined) {\n      throw new Error('Missing required parameter: arguments');\n    }\n\n    return await this.engine.executeTool(\n      args.server,\n      args.tool,\n      args.arguments\n    );\n  }\n\n  /**\n   * Get registered tools\n   */\n  getTools(): Tool[] {\n    return this.tools;\n  }\n\n  /**\n   * Start the server\n   */\n  async start(): Promise<void> {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n  }\n}\n"],"mappings":"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"}