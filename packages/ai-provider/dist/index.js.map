{"version":3,"file":"index.js","names":["toolCalls: ToolCall[] | undefined"],"sources":["../src/ai-provider.ts"],"sourcesContent":["import type {\n  IAIProvider,\n  ChatRequest,\n  ChatResponse,\n  ChatChunk,\n  ProviderConfig,\n  Message,\n  ToolCall,\n} from './types.js';\n\n/**\n * AI Provider wrapper that uses @anygpt/router for provider-agnostic AI interactions\n */\nexport class AIProvider implements IAIProvider {\n  private router: any;\n  public config: ProviderConfig;\n\n  constructor(router: any, config: ProviderConfig) {\n    this.router = router;\n    this.config = config;\n  }\n\n  /**\n   * Send a chat request and get a response\n   */\n  async chat(request: ChatRequest): Promise<ChatResponse> {\n    // Convert our format to router format\n    const routerRequest = {\n      provider: this.config.provider,\n      model: request.model || this.config.model,\n      messages: this.convertMessages(request.messages),\n      ...(request.tools && { tools: this.convertTools(request.tools) }),\n      ...(request.temperature !== undefined && {\n        temperature: request.temperature,\n      }),\n      ...(request.maxTokens && { max_tokens: request.maxTokens }),\n    };\n\n    // Call router\n    const response = await this.router.chatCompletion(routerRequest);\n\n    // Convert router response to our format\n    return this.convertResponse(response);\n  }\n\n  /**\n   * Stream a chat response\n   */\n  async *stream(request: ChatRequest): AsyncIterator<ChatChunk> {\n    // TODO: Implement streaming in future iteration\n    throw new Error('Streaming not yet implemented');\n  }\n\n  /**\n   * Convert messages to router format\n   */\n  private convertMessages(messages: Message[]): any[] {\n    return messages.map((msg) => ({\n      role: msg.role,\n      content: msg.content,\n      ...(msg.name && { name: msg.name }),\n      ...(msg.toolCallId && { tool_call_id: msg.toolCallId }),\n      ...(msg.toolCalls && { tool_calls: msg.toolCalls }),\n    }));\n  }\n\n  /**\n   * Convert tools to router format\n   */\n  private convertTools(tools: any[]): any[] {\n    // Router uses same format as OpenAI, so pass through\n    return tools;\n  }\n\n  /**\n   * Convert router response to our format\n   */\n  private convertResponse(response: any): ChatResponse {\n    const choice = response.choices[0];\n    const message = choice.message;\n\n    // Extract tool calls if present\n    const toolCalls: ToolCall[] | undefined = message.tool_calls?.map(\n      (tc: any) => ({\n        id: tc.id,\n        type: 'function' as const,\n        function: {\n          name: tc.function.name,\n          arguments: tc.function.arguments,\n        },\n      })\n    );\n\n    return {\n      message: message.content || '',\n      toolCalls,\n      finishReason: this.normalizeFinishReason(choice.finish_reason),\n      usage: {\n        promptTokens: response.usage?.prompt_tokens || 0,\n        completionTokens: response.usage?.completion_tokens || 0,\n        totalTokens: response.usage?.total_tokens || 0,\n      },\n      model: response.model,\n    };\n  }\n\n  /**\n   * Normalize finish reason across providers\n   */\n  private normalizeFinishReason(\n    reason: string\n  ): 'stop' | 'tool_calls' | 'length' | 'content_filter' {\n    switch (reason) {\n      case 'stop':\n        return 'stop';\n      case 'tool_calls':\n      case 'function_call':\n        return 'tool_calls';\n      case 'length':\n      case 'max_tokens':\n        return 'length';\n      case 'content_filter':\n        return 'content_filter';\n      default:\n        return 'stop';\n    }\n  }\n}\n"],"mappings":";;;;AAaA,IAAa,aAAb,MAA+C;CAC7C,AAAQ;CACR,AAAO;CAEP,YAAY,QAAa,QAAwB;AAC/C,OAAK,SAAS;AACd,OAAK,SAAS;;;;;CAMhB,MAAM,KAAK,SAA6C;EAEtD,MAAM,gBAAgB;GACpB,UAAU,KAAK,OAAO;GACtB,OAAO,QAAQ,SAAS,KAAK,OAAO;GACpC,UAAU,KAAK,gBAAgB,QAAQ,SAAS;GAChD,GAAI,QAAQ,SAAS,EAAE,OAAO,KAAK,aAAa,QAAQ,MAAM,EAAE;GAChE,GAAI,QAAQ,gBAAgB,UAAa,EACvC,aAAa,QAAQ,aACtB;GACD,GAAI,QAAQ,aAAa,EAAE,YAAY,QAAQ,WAAW;GAC3D;EAGD,MAAM,WAAW,MAAM,KAAK,OAAO,eAAe,cAAc;AAGhE,SAAO,KAAK,gBAAgB,SAAS;;;;;CAMvC,OAAO,OAAO,SAAgD;AAE5D,QAAM,IAAI,MAAM,gCAAgC;;;;;CAMlD,AAAQ,gBAAgB,UAA4B;AAClD,SAAO,SAAS,KAAK,SAAS;GAC5B,MAAM,IAAI;GACV,SAAS,IAAI;GACb,GAAI,IAAI,QAAQ,EAAE,MAAM,IAAI,MAAM;GAClC,GAAI,IAAI,cAAc,EAAE,cAAc,IAAI,YAAY;GACtD,GAAI,IAAI,aAAa,EAAE,YAAY,IAAI,WAAW;GACnD,EAAE;;;;;CAML,AAAQ,aAAa,OAAqB;AAExC,SAAO;;;;;CAMT,AAAQ,gBAAgB,UAA6B;EACnD,MAAM,SAAS,SAAS,QAAQ;EAChC,MAAM,UAAU,OAAO;EAGvB,MAAMA,YAAoC,QAAQ,YAAY,KAC3D,QAAa;GACZ,IAAI,GAAG;GACP,MAAM;GACN,UAAU;IACR,MAAM,GAAG,SAAS;IAClB,WAAW,GAAG,SAAS;IACxB;GACF,EACF;AAED,SAAO;GACL,SAAS,QAAQ,WAAW;GAC5B;GACA,cAAc,KAAK,sBAAsB,OAAO,cAAc;GAC9D,OAAO;IACL,cAAc,SAAS,OAAO,iBAAiB;IAC/C,kBAAkB,SAAS,OAAO,qBAAqB;IACvD,aAAa,SAAS,OAAO,gBAAgB;IAC9C;GACD,OAAO,SAAS;GACjB;;;;;CAMH,AAAQ,sBACN,QACqD;AACrD,UAAQ,QAAR;GACE,KAAK,OACH,QAAO;GACT,KAAK;GACL,KAAK,gBACH,QAAO;GACT,KAAK;GACL,KAAK,aACH,QAAO;GACT,KAAK,iBACH,QAAO;GACT,QACE,QAAO"}