# Simplified Release PR Workflow
# Uses a label-based approach for better control

name: CI and Release

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: write
  pull-requests: write
  id-token: write

jobs:
  # Step 1: Create Release PR immediately (CI will run on the PR)
  create-release-pr:
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      !startsWith(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v5
        with:
          node-version: lts/*

      - run: npm install --no-package-lock
      - run: npm run build

      # Check for releasable changes
      - name: Check for releasable changes
        id: check
        run: |
          if npx nx release version --dry-run 2>&1 | grep -q "No changes were detected"; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No releasable changes found"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Found releasable changes"
          fi

      # Create release branch
      - name: Create release branch
        if: steps.check.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Delete old release branch if exists
          git push origin --delete release-next || true
          
          # Create fresh release branch from main
          git checkout -b release-next
          
          # Run nx release (version only)
          npx nx release version --yes
          
          # Push branch
          git push origin release-next

      # Create PR using GitHub CLI
      - name: Create Release PR
        if: steps.check.outputs.has_changes == 'true'
        run: |
          gh pr create \
            --title "🚀 Release: Next Version" \
            --body "$(cat <<'EOF'
          ## 🚀 Release PR
          
          This PR contains version bumps and changelog updates for the next release.
          
          ### 📦 What's included
          
          - ✅ Version bumps in \`package.json\`
          - ✅ Updated \`CHANGELOG.md\` files
          - ✅ Ready to publish
          
          ### ✅ CI Status
          
          **CI will run on this PR** - you can see all test results here!
          
          ### 🎯 How to release
          
          1. **Review** the changes in the "Files changed" tab
          2. **Check** CI results below (all checks must pass ✅)
          3. **Edit** CHANGELOGs if needed (commit directly to this branch)
          4. **Merge** this PR to publish to npm
          
          ### 📝 What happens on merge?
          
          - Git tags will be created
          - Packages will be published to npm
          - Release branch will be deleted
          EOF
          )" \
            --head release-next \
            --base main \
            --label release || echo "PR already exists"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 2: Run CI on PRs (including Release PR)
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          filter: tree:0
          fetch-depth: 0

      - uses: actions/setup-node@v5
        with:
          node-version: lts/*

      - run: npm install --no-package-lock
      - run: npm run build

      - name: Run CI checks
        run: |
          npx nx format:check || true
          npx nx run-many -t lint test build typecheck
          npx nx fix-ci || true

  # Step 3: Publish when Release PR is merged
  publish:
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      startsWith(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v5
        with:
          node-version: lts/*
          registry-url: 'https://registry.npmjs.org'

      - run: npm install --no-package-lock
      - run: npm run build

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Extract version info and create tags
      - name: Create git tags
        run: |
          # Find all package.json files that were changed
          git diff HEAD~1 HEAD --name-only | grep 'package.json' | while read file; do
            if [[ "$file" == packages/*/package.json ]]; then
              pkg_dir=$(dirname "$file")
              pkg_name=$(jq -r '.name' "$file" | sed 's/@anygpt\///')
              version=$(jq -r '.version' "$file")
              tag="${pkg_name}@${version}"
              
              echo "Creating tag: $tag"
              git tag -a "$tag" -m "Release $tag" || echo "Tag $tag already exists"
            fi
          done

      # Publish to npm
      - name: Publish to npm
        run: |
          # Use nx release publish from the tags
          npx nx release publish --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      # Push tags to GitHub
      - name: Push tags
        run: |
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
