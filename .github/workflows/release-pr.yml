# Release Workflow - Manual CLI with PR visualization
#
# Flow:
# 1. Run locally: nx release version (on main)
# 2. Push to main
# 3. Workflow creates PR: main â†’ production
# 4. Review PR + CI checks
# 5. Merge â†’ Publishes to npm

name: Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [production]

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  create-pr:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for version changes
        id: check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -qE 'package\.json|CHANGELOG\.md'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract changelogs
        if: steps.check.outputs.changed == 'true'
        id: changelog
        run: |
          {
            echo "content<<EOF"
            for file in packages/*/CHANGELOG.md; do
              if [ -f "$file" ]; then
                pkg=$(basename $(dirname "$file"))
                echo "### ðŸ“¦ $pkg"
                sed -n '/^## /,/^## /p' "$file" | head -n -1 | head -n 15
                echo ""
              fi
            done
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create/Update PR
        if: steps.check.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          CHANGELOG: ${{ steps.changelog.outputs.content }}
        run: |
          pr=$(gh pr list --head main --base production --state open --json number -q '.[0].number')
          
          cat > /tmp/pr-body.md << 'PRBODY'
## ðŸš€ Release PR

This PR will publish the version changes to npm when merged.

### ðŸ“‹ Changelog

PRBODY
          echo "${CHANGELOG}" >> /tmp/pr-body.md
          cat >> /tmp/pr-body.md << 'PRBODY'

### âœ… Next Steps

1. Review changes in the Files tab
2. Wait for CI checks to pass
3. Merge to publish to npm
PRBODY

          if [ -z "$pr" ]; then
            gh pr create --title "Release: $(date +%Y-%m-%d)" --body-file /tmp/pr-body.md --head main --base production
          else
            gh pr edit "$pr" --body-file /tmp/pr-body.md
          fi

  ci-checks:
    if: github.event_name == 'pull_request' && github.base_ref == 'production'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: '24'
      - run: npm install --no-package-lock
      - run: npm run build
      - run: npx nx affected -t lint test --base=origin/production

  publish:
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v5
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org'

      - run: npm install --no-package-lock
      - run: npm run build

      - name: Create tags
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git diff HEAD~1 HEAD --name-only | grep 'package.json' | while read file; do
            if [[ "$file" == packages/*/package.json ]]; then
              name=$(jq -r '.name' "$file" | sed 's/@anygpt\///')
              version=$(jq -r '.version' "$file")
              tag="${name}@${version}"
              git tag -a "$tag" -m "Release $tag" || true
            fi
          done

      - name: Publish
        run: npx nx release publish --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}

      - name: Push tags
        run: git push --tags
