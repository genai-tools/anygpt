# Simplified Release PR Workflow
# Uses a label-based approach for better control

name: CI and Release

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: write
  pull-requests: write
  id-token: write

jobs:
  # Step 1: Always run CI
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          filter: tree:0
          fetch-depth: 0

      - uses: actions/setup-node@v5
        with:
          node-version: lts/*

      - run: npm install --no-package-lock
      - run: npm run build

      - name: Run CI checks
        run: |
          npx nx format:check || true
          npx nx run-many -t lint test build typecheck
          npx nx fix-ci || true

  # Step 2: Create Release PR (manual trigger via workflow_dispatch or automatic)
  create-release-pr:
    needs: ci
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      (contains(github.event.head_commit.message, 'feat') || 
       contains(github.event.head_commit.message, 'fix'))
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v5
        with:
          node-version: lts/*

      - run: npm install --no-package-lock
      - run: npm run build

      # Check if there are changes to release
      - name: Check for changes
        id: check
        run: |
          if npx nx release version --dry-run 2>&1 | grep -q "No changes were detected"; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No releasable changes found"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Found releasable changes"
          fi

      # Create release branch
      - name: Create release branch
        if: steps.check.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Delete old release branch if exists
          git push origin --delete release-next || true
          
          # Create fresh release branch from main
          git checkout -b release-next
          
          # Run nx release (version only)
          npx nx release version --yes
          
          # Push branch
          git push origin release-next

      # Create PR
      - name: Create Release PR
        if: steps.check.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Close any existing release PRs
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:release-next`
            });
            
            for (const pr of existingPRs) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: 'closed'
              });
            }
            
            // Get version info from package.json changes
            const { data: files } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'main',
              head: 'release-next'
            });
            
            // Create new PR
            const prBody = [
              '## üöÄ Release PR',
              '',
              'This PR contains version bumps and changelog updates for the next release.',
              '',
              '### üì¶ What\'s included',
              '',
              '- ‚úÖ Version bumps in `package.json`',
              '- ‚úÖ Updated `CHANGELOG.md` files',
              '- ‚úÖ Ready to publish',
              '',
              '### ‚úÖ CI Status',
              '',
              'CI checks have passed on the base commit. They will run again on this PR.',
              '',
              '### üéØ How to release',
              '',
              '1. **Review** the changes in the "Files changed" tab',
              '2. **Edit** CHANGELOGs if needed (commit directly to this branch)',
              '3. **Wait** for CI to pass',
              '4. **Merge** this PR to publish to npm',
              '',
              '### üìù What happens on merge?',
              '',
              '- Git tags will be created',
              '- Packages will be published to npm',
              '- Release branch will be deleted',
              '',
              '---',
              '',
              `**Changed files:** ${files.files.length}`,
              `**Commits:** ${files.commits.length}`
            ].join('\n');
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üöÄ Release: Next Version',
              head: 'release-next',
              base: 'main',
              body: prBody,
              draft: false
            });
            
            // Add label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['release']
            });
            
            console.log(`Created Release PR #${pr.number}`);

  # Step 3: Publish when Release PR is merged
  publish:
    needs: ci
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      startsWith(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v5
        with:
          node-version: lts/*
          registry-url: 'https://registry.npmjs.org'

      - run: npm install --no-package-lock
      - run: npm run build

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Extract version info and create tags
      - name: Create git tags
        run: |
          # Find all package.json files that were changed
          git diff HEAD~1 HEAD --name-only | grep 'package.json' | while read file; do
            if [[ "$file" == packages/*/package.json ]]; then
              pkg_dir=$(dirname "$file")
              pkg_name=$(jq -r '.name' "$file" | sed 's/@anygpt\///')
              version=$(jq -r '.version' "$file")
              tag="${pkg_name}@${version}"
              
              echo "Creating tag: $tag"
              git tag -a "$tag" -m "Release $tag" || echo "Tag $tag already exists"
            fi
          done

      # Publish to npm
      - name: Publish to npm
        run: |
          # Use nx release publish from the tags
          npx nx release publish --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      # Push tags to GitHub
      - name: Push tags
        run: |
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
